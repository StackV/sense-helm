---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ include "common.namespace" . | quote }}
  labels: {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: mysql
  name: {{.Release.Name}}-mysql
spec:
  selector:
    matchLabels: {{ include "common.labels.match" . | nindent 6 }}
      app.kubernetes.io/component: mysql
  serviceName: {{.Release.Name}}-mysql
  replicas: 1
  template:
    metadata:
      labels: {{- include "common.labels" . | nindent 8 }}
        app.kubernetes.io/component: mysql
      name: {{.Release.Name}}-mysql
    spec:
      containers:
        - name: {{.Release.Name}}-mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{.Values.global.credSecret | default (printf "%s-cred" .Release.Name)}}
                  key: {{.Values.mysql.passwordKey}}
          image: mysql:5.7
          args:
            - "--ignore-db-dir=lost+found"
          imagePullPolicy: Always
          {{- if .Values.mysql.probes.startup.custom }}
          startupProbe: {{- include "common.render" (dict "value" .Values.mysql.probes.startup.custom "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.mysql.probes.liveness.enabled }}
          livenessProbe:
            exec:
              command: ["mysqladmin", "ping"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          {{- else if .Values.mysql.probes.liveness.custom }}
          livenessProbe: {{- include "common.render" (dict "value" .Values.mysql.probes.liveness.custom "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.mysql.probes.readiness.enabled }}
          readinessProbe:
            exec:
              command: 
                - "bash" 
                - "-c"
                - "mysql -h 127.0.0.1 --password=${MYSQL_ROOT_PASSWORD} -e \"SELECT 1\""
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
          {{- else if .Values.mysql.probes.readiness.custom }}
          readinessProbe: {{- include "common.render" (dict "value" .Values.mysql.probes.readiness.custom "context" $) | nindent 12 }}
          {{- end }}        
          name: {{.Release.Name}}-mysql
          ports:
            - containerPort: 3306
              protocol: TCP
          {{- with .Values.mysql.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-data
            - mountPath: /docker-entrypoint-initdb.d/
              name: mysql-init
            - mountPath: /etc/mysql/conf.d/
              name: mysql-config
      restartPolicy: Always
      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: {{ default (printf "%s-mysql-pvc" .Release.Name) .Values.mysql.pvcName }}
        - configMap:
            name: {{.Release.Name}}-mysql-config
          name: mysql-config
        - configMap:
            {{- if eq .Values.global.mode "test" }}
            name: {{.Release.Name}}-mysql-init-dump
            {{- else }}
            name: {{.Release.Name}}-mysql-init-raw
            {{- end }}
          name: mysql-init
      {{- if .Values.mysql.affinity }}
      affinity: {{- include "common.render" ( dict "value" .Values.mysql.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.mysql.nodeSelector }}
      nodeSelector: {{- include "common.render" ( dict "value" .Values.mysql.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.mysql.tolerations }}
      tolerations: {{- include "common.render" (dict "value" .Values.mysql.tolerations "context" .) | nindent 8 }}
      {{- end }}